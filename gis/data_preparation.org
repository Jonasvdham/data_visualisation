#+TITLE: Data Preparation for GIS
#+AUTHOR: Jonas van der Ham | MSc MADE
#+EMAIL: Jonasvdham@gmail.com
#+DATE: Monday, 28 February 2022
#+STARTUP: showall
#+PROPERTY: header-args :exports both :session gis :cache no
:PROPERTIES:
#+OPTIONS: ^:nil
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [logo, color, author]
#+LATEX_HEADER: \insertauthor
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage[style=ieee, citestyle=numeric-comp, isbn=false]{biblatex}
#+LATEX_HEADER: \addbibresource{~/made/bibliography/references.bib}
#+LATEX_HEADER: \setminted{bgcolor=WhiteSmoke}
#+OPTIONS: toc:nil
:END:

* Imports

#+begin_src python :results none
import pandas as pd
import numpy as np
from datetime import datetime
from datetime import timedelta
#+end_src

* OurWorldInData Complete dataset

We use the same data as we did in python, and in this report prepare it for use
in ArcGIS.

#+begin_src python :results none
#df = pd.read_csv("~/data_visualisation/owid-covid-data.csv")
df = pd.read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
cols = list(df.columns)

# Save only countries
df = df[~df['continent'].isna()]
#+end_src

Take country shapefiles from
https://public.opendatasoft.com/explore/dataset/country_shapes/export/

#+begin_src python :results none
country_boundaries = pd.read_csv("~/data_visualisation/country_shapes.csv", delimiter=";")
#+end_src

Joining them, some country codes are missing though :(
#+begin_src python :results none
#df = df.join(country_boundaries, lsuffix="iso_code", rsuffix="ISO3")
df2 = pd.concat([pd.merge(df[~df["continent"].isna()], country_boundaries, left_on='iso_code', right_on='ISO3'),
                 pd.merge(df, country_boundaries[country_boundaries['ISO3'].isna()], left_on='location', right_on='Country')])
df2 = df2.drop(["ISO3 CODE", "LABEL FR", "LABEL SP", "ONU CODE", "Iso2 2", "Iso A2", "ISO2", "ISO3", "Join Name", "Country"], axis=1)
cols2 = df2.columns
#+end_src

#+begin_src python :results none
shapes = df2.groupby("location")['Geo Shape'].first()
shapes.to_csv("~/data_visualisation/my_country_shapes.csv")
#+end_src

#+begin_src python :results none
country_df = df[~df['iso_code'].isna()]
country_df.to_csv("~/data_visualisation")
#+end_src

** Filling missing dates

Looks like ArcGIS doesn't like the fact that data only starts for countries
once the first case happened, so let's add NAN data.

#+begin_src python :results none
full_df = df[['iso_code', 'location', 'date', 'total_cases', 'total_cases_per_million', 'new_cases_smoothed_per_million', 'new_deaths_smoothed', 'people_vaccinated_per_hundred', 'population', 'population_density', 'gdp_per_capita', 'life_expectancy', 'human_development_index']].copy()
dates = full_df.date.unique()


for loc in full_df['iso_code'].unique():
    row = df[df['iso_code']==loc].iloc[0]
    #min_date = datetime.strptime(full_df[full_df['iso_code']==loc]['date'].min(), '%Y-%m-%d')
    date_range = set(pd.Series(pd.date_range(dates.min(), dates.max(),freq='d').strftime('%Y-%m-%d')))
    missing_dates = sorted(date_range - set(full_df[full_df['iso_code']==loc].date.unique()))

    if len(row['iso_code']) < 3:
        print(loc)
    empty_row = np.empty(len(missing_dates))
    empty_row[:] = np.nan
    tmp_df = pd.DataFrame(
        {'iso_code': np.array(len(missing_dates) * [row['iso_code']]),
         'location': np.array(len(missing_dates) * [row['location']]),
         'date': missing_dates,
         'total_deaths': empty_row,
         'new_deaths_smoothed': empty_row,
         'total_cases': empty_row,
         'total_cases_per_million': empty_row,
         'new_cases_smoothed_per_million': empty_row,
         'people_vaccinated_per_hundred': empty_row,
         'population': np.array(len(missing_dates) * [row['population']]),
         'population_density': np.array(len(missing_dates) * [row['population_density']]),
         'gdp_per_capita': np.array(len(missing_dates) * [row['gdp_per_capita']]),
         'life_expectancy': np.array(len(missing_dates) * [row['life_expectancy']]),
         'human_development_index': np.array(len(missing_dates) * [row['human_development_index']]),
        }
    )
    # if len(tmp_df['location'].iloc[0]) < 3:
    #     print(loc, tmp_df['location'].iloc[0])
    full_df = pd.concat([full_df, tmp_df])

full_df = full_df.sort_values(by=['iso_code', 'date'], ignore_index=True)
#+end_src

#+begin_src python :results none
full_df.to_csv("~/data_visualisation/covid_data_filled_dates.csv", index=False)
#+end_src

*** Group by month

#+begin_src python :results none
full_df = full_df[full_df['iso_code'].str.len() <= 3]
full_df = full_df.fillna(0)
#+end_src

#+begin_src python :results none
period = pd.period_range(start=full_df.date.min(), end=full_df.date.max(), freq='M')
aggregators = {
    'iso_code': 'first',
    'location': 'first',
    'date': 'first',
    'total_cases': 'mean',
    'total_deaths': 'mean',
    'new_deaths_smoothed': 'mean',
    'total_cases_per_million': 'mean',
    'new_cases_smoothed_per_million': 'mean',
    'people_vaccinated_per_hundred': 'mean',
    'population': 'mean',
    'gdp_per_capita': 'mean'}
months_df = pd.DataFrame(
    columns=[
        'iso_code',
        'location',
        'date',
        'total_cases',
        'total_deaths',
        'new_deaths_smoothed',
        'total_cases_per_million',
        'new_cases_smoothed_per_million',
        'people_vaccinated_per_hundred',
        'population',
        'gdp_per_capita',
    ]
)
for date in period:
    tmp_grouping = full_df[full_df['date'].str[:7]==str(date)].groupby('location')
    df_tmp = tmp_grouping.agg(aggregators)
    df_tmp['date'] = df_tmp['date'].str[:7]
    months_df = pd.concat([months_df, df_tmp])
    #df_tmp.to_csv("~/data_visualisation/javascript/vue-datamaps/demo/example-vue-cli3/public/data/covid_data"+str(date)+".csv")
months_df.to_csv("~/data_visualisation/javascript/vue-datamaps/demo/example-vue-cli3/public/data/monthly_covid_data.csv")
#+end_src

#+begin_src python :results none

#+end_src

'2020-01': 0,
'2020-02': 224,
'2020-03': 448,
'2020-04': 672,
'2020-05': 896,
'2020-06': 1120,
'2020-07': 1344,
'2020-08': 1568,
'2020-09': 1792,
'2020-10': 2016,
'2020-11': 2240,
'2020-12': 2464,
'2021-01': 2688,
'2021-02': 2912,
'2021-03': 3136,
'2021-04': 3360,
'2021-05': 3584,
'2021-06': 3808,
'2021-07': 4032,
'2021-08': 4256,
'2021-09': 4480,
'2021-10': 4704,
'2021-11': 4928,
'2021-12': 5152,
'2022-01': 5376,
'2022-02': 5600,
'2022-03': 5824
* Lazy: Dataset for 1 day

Time series data in ArcGIS is giving me a hard time so just to have something
to show for, I will create some single day datasets

#+begin_src python :results none
for date in ['2020-04-01', '2020-09-01', '2021-04-01', '2021-09-01', '2022-02-01']:
    df[df.date==date].to_csv("~/data_visualisation/covid_data"+date+".csv")
#+end_src

Ok those create nice graphics, but it would be more informative to use monthly
averages.

#+begin_src python :results none
period = pd.period_range(start=df.date.min(), end=df.date.max(), freq='M')
aggregators = {
    'iso_code': 'first',
    'continent': 'first',
    'location': 'first',
    'total_cases': 'mean',
    'new_cases_smoothed': 'mean',
    'total_deaths': 'mean',
    'new_deaths_smoothed': 'mean',
    'total_cases_per_million': 'mean',
    'new_cases_smoothed_per_million': 'mean',
    'total_deaths_per_million': 'mean',
    'new_deaths_smoothed_per_million': 'mean',
    'reproduction_rate': 'mean',
    'icu_patients_per_million': 'mean',
    'hosp_patients_per_million': 'mean',
    'people_vaccinated': 'mean',
    'people_fully_vaccinated': 'mean',
    'people_vaccinated_per_hundred': 'mean',
    'people_fully_vaccinated_per_hundred': 'mean',
    'new_vaccinations_smoothed_per_million': 'mean',
    'population': 'mean',
    'population_density': 'mean',
    'median_age': 'mean',
    'gdp_per_capita': 'mean'}

for date in period:
    tmp_grouping = df[df['date'].str[:7]==str(date)].groupby('location')
    df_tmp = tmp_grouping.agg(aggregators)
    df_tmp.to_csv("~/data_visualisation/covid_data"+str(date)+".csv")
#+end_src
* Links

temporal data arcgis pro
https://pro.arcgis.com/en/pro-app/2.8/get-started/visualize-temporal-data.htm
