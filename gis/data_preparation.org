#+TITLE: Data Preparation for GIS
#+AUTHOR: Jonas van der Ham | MSc MADE
#+EMAIL: Jonasvdham@gmail.com
#+DATE: Monday, 28 February 2022
#+STARTUP: showall
#+PROPERTY: header-args :exports both :session gis :cache no
:PROPERTIES:
#+OPTIONS: ^:nil
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [logo, color, author]
#+LATEX_HEADER: \insertauthor
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage[style=ieee, citestyle=numeric-comp, isbn=false]{biblatex}
#+LATEX_HEADER: \addbibresource{~/made/bibliography/references.bib}
#+LATEX_HEADER: \setminted{bgcolor=WhiteSmoke}
#+OPTIONS: toc:nil
:END:

* Imports

#+begin_src python :results none
import pandas as pd
import numpy as np
from datetime import datetime
from datetime import timedelta
#+end_src

* OurWorldInData Complete dataset

We use the same data as we did in python, and in this report prepare it for use
in ArcGIS.

#+begin_src python :results none
#df = pd.read_csv("~/data_visualisation/owid-covid-data.csv")
df = pd.read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
cols = list(df.columns)

# Save only countries
df = df[~df['continent'].isna()]
#+end_src

Take country shapefiles from
https://public.opendatasoft.com/explore/dataset/country_shapes/export/

#+begin_src python :results none
country_boundaries = pd.read_csv("~/data_visualisation/country_shapes.csv", delimiter=";")
#+end_src

Joining them, some country codes are missing though :(
#+begin_src python :results none
#df = df.join(country_boundaries, lsuffix="iso_code", rsuffix="ISO3")
df2 = pd.concat([pd.merge(df[~df["continent"].isna()], country_boundaries, left_on='iso_code', right_on='ISO3'),
                 pd.merge(df, country_boundaries[country_boundaries['ISO3'].isna()], left_on='location', right_on='Country')])
df2 = df2.drop(["ISO3 CODE", "LABEL FR", "LABEL SP", "ONU CODE", "Iso2 2", "Iso A2", "ISO2", "ISO3", "Join Name", "Country"], axis=1)
cols2 = df2.columns
#+end_src

#+begin_src python :results none
shapes = df2.groupby("location")['Geo Shape'].first()
shapes.to_csv("~/data_visualisation/my_country_shapes.csv")
#+end_src

#+begin_src python :results none
country_df = df[~df['iso_code'].isna()]
country_df.to_csv("~/data_visualisation")
#+end_src

** Filling missing dates

Looks like ArcGIS doesn't like the fact that data only starts for countries
once the first case happened, so let's add NAN data.

#+begin_src python :results none
full_df = df[['iso_code', 'location', 'date', 'new_deaths_smoothed', 'total_cases_per_million', 'new_cases_smoothed_per_million', 'people_vaccinated_per_hundred', 'population', 'population_density', 'gdp_per_capita', 'life_expectancy', 'human_development_index']].copy()
dates = full_df.date.unique()


for loc in full_df['iso_code'].unique():
    row = df[df['iso_code']==loc].iloc[0]
    #min_date = datetime.strptime(full_df[full_df['iso_code']==loc]['date'].min(), '%Y-%m-%d')
    date_range = set(pd.Series(pd.date_range(dates.min(), dates.max(),freq='d').strftime('%Y-%m-%d')))
    missing_dates = sorted(date_range - set(full_df[full_df['iso_code']==loc].date.unique()))

    empty_row = np.empty(len(missing_dates))
    empty_row[:] = np.nan
    tmp_df = pd.DataFrame({'iso_code': np.full_like(missing_dates, row['iso_code']), 'location': np.full_like(missing_dates, row['location']), 'date': missing_dates, 'new_deaths_smoothed': empty_row, 'total_cases_per_million': empty_row, 'new_cases_smoothed_per_million': empty_row, 'people_vaccinated_per_hundred': empty_row, 'population': np.full_like(missing_dates, row['population']), 'population_density': np.full_like(missing_dates, row['population_density']), 'gdp_per_capita': np.full_like(missing_dates, row['gdp_per_capita']), 'life_expectancy': np.full_like(missing_dates, row['life_expectancy']), 'human_development_index': np.full_like(missing_dates, row['human_development_index'])})
    full_df = pd.concat([full_df, tmp_df])

full_df = full_df.sort_values(by=['iso_code', 'date'])
#+end_src

#+begin_src python :results none
full_df.to_csv("~/data_visualisation/covid_data_filled_dates.csv")
#+end_src
* Lazy: Dataset for 1 day

Time series data in ArcGIS is giving me a hard time so just to have something
to show for, I will create some single day datasets

#+begin_src python :results none
for date in ['2020-04-01', '2020-09-01', '2021-04-01', '2021-09-01', '2022-02-01']:
    df[df.date==date].to_csv("~/data_visualisation/covid_data"+date+".csv")
#+end_src
* Links

temporal data arcgis pro
https://pro.arcgis.com/en/pro-app/2.8/get-started/visualize-temporal-data.htm
